------------------------------------------
Inheritance (Ch 11)
	At the end of this presentation, you should be able to 
		Explain the order in which constructors and destructors are called for base/inherited classes
		Pass arguments to the base class constructor from the inherited class
		Explain how access specifiers work and use them apropriately 
------------------------------------------
Constructor Order
	When an object is created from an inherited class
		the base class constructor is run
		followed by the inherited class constructor
	However, the inherited class constructor might accept arguments 
		some of which need to be processed in the inherited class constructor
		and some of which need to be passed on to the base class constructor
		
---------------------------------------------
Issue
	The following classes both have constructors that accept values:
	[[code]]
		class BaseClass {
		  public:
			BaseClass(int xVal);
		  private:
			int x;
		}
			
		class InheritedClass : public BaseClass {
		  public:
			InheritedClass(int xVal, int yVal);
		  private:
			int y;
		}
					
		InheritedClass myVar(4,5);
		
	So there needs to be a mechanism to get data to both constructors from the instantiation of myVar.
---------------------------------------------
Solution
	The following syntax is used when implementing the Inherited class constructor
	[[code]]
		InheritedClass::InheritedClass(int xVal, int yVal) 
			: BaseClass(xVal)
		{
			y = yVal;
		}
	If an object of the inherited class is instantiated like this:
	[[code]]
		InheritedClass myVar(4,5);
	Then
		The arguments (4,5) are stored in xVal and yVal
		xVal is passed on the base class constructor
		yVal is used in the inherited class constructor
---------------------------------------------
Destructor Order
	When destroying an object created from an inherited class
		the inherited class destructor is called
		followed by the base class destructor
---------------------------------------------
 - - - - -
 	This page intentionally left blank
---------------------------------------------
Access Specifiers
	The available access specifiers, in order from least to most restrictive, are:
		public	
		protected
		private
	The least and most restrictive are simple
		Public members are available to code outside the class
		Private members are available only to code that is a part of that class or friends of that class
	The middle one (protected) comes into play with inheritance
		Protected members are available to member functions AND any inherited class member functions
			I.E. It's private to the class and any class that uses that class as a base class.
---------------------------------------------
With inheritance
	When implementing inheritance, a specifier is used and defines the minimum level of restriction
	For example:
		[[code]]
			class InheritedClass : public BaseClass 
	In this case, public and protected members stay that way in the inherited class
		public members of the base class become public members of the inherited class
		protected members of the base class become protected members of the inherited class
		private members of the base class remain inaccessible to the inherited class
			
---------------------------------------------
continued
	Another, much more restrictive example is as follows:
		[[code]]
			class InheritedClass : private BaseClass 
	In this case, public and protected members change to private in the inherited class
		public members of the base class become public members of the inherited class
		protected members of the base class become private members of the inherited class
		private members of the base class remain inaccessible to the inherited class
			
---------------------------------------------
continued
	Lastly, the middle way:
		[[code]]
			class InheritedClass : protected BaseClass 
	In this case, public members change to protected in the inherited class
		public members of the base class become protected members of the inherited class
		protected members of the base class become protected members of the inherited class
		private members of the base class remain inaccessible to the inherited class
